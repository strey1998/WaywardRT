// WaywardRT/WaywardRT/include/WaywardRT/Quaternion.h
// Copyright 2022 Trey Stoner
// All rights reserved

#ifndef WAYWARDRT_INCLUDE_WAYWARDRT_QUATERNION_H_
#define WAYWARDRT_INCLUDE_WAYWARDRT_QUATERNION_H_

#include <cstdint>
#include <ostream>

#include "WaywardRT_export.h"
#include "WaywardRT/Vec3.h"
#include "WaywardRT/util.h"

namespace WaywardRT {

//////////////////////////////////////////////////////////////////////////////
/// Represents a quaternion
/// @author   Trey Stoner
/// @version  0.1.0
/// @since    0.1.0
//////////////////////////////////////////////////////////////////////////////
class WAYWARDRT_EXPORT Quaternion {
 private:
  real m_RealPart;
  Vec3 m_VectorPart;

 public:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief Initializes a zero quaternion
  //////////////////////////////////////////////////////////////////////////////
  Quaternion();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Initializes a pure quaternion
  /// @param[in] v The vector component
  //////////////////////////////////////////////////////////////////////////////
  explicit Quaternion(const Vec3& v);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Initializes a quaternion
  /// @param[in] x The real component
  /// @param[in] v The vector component
  //////////////////////////////////////////////////////////////////////////////
  Quaternion(real x, const Vec3& v);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Initializes a quaternion a + b*i + c*j + d*k
  //////////////////////////////////////////////////////////////////////////////
  Quaternion(real a, real b, real c, real d);

  Quaternion(const Quaternion& other);
  Quaternion& operator=(const Quaternion& other);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Accessor for real part
  /// @return The real part of this quaternion
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] real real_part() const noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Accessor for vector part
  /// @return The vector part of this quaternion
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] const Vec3& vector_part() const noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Normalizes this quaternion
  /// @return A reference to this quaternion
  //////////////////////////////////////////////////////////////////////////////
  Quaternion& normalize() noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Gets a normalized version of this quaternion
  /// @return A new quaternion that is equal to this one divided by its norm
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Quaternion normalized() const noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Gets the inverse of this quaternion
  /// @return A new quaternion that is equal to the inverse of this one
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Quaternion inverse() const;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Conjugate
  /// @return The conjugate of this quaternion
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Quaternion conjugate() const;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Norm
  /// @return The norm of this quaternion
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] real norm() const;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Norm squared
  /// @return The norm squared of this quaternion, or the dot product of it
  ///   with itself
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] real norm_sq() const;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Applies a rotation described by this quaternion to a vector
  /// @param[in] v The vector to rotate
  /// @return The rotated vector qv(q*), where q is this quaternion
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Vec3 apply_rotation(const Vec3& v) const;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Applies a rotation described by this quaternion's conjugate to a
  ///   vector
  /// @param[in] v The vector to rotate
  /// @return The rotated vector (q*)vq, where q is this quaternion
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Vec3 apply_inverse_rotation(const Vec3& v) const;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Creates a new quaternion of the same magnitude in the opposite
  ///   direction
  /// @return The new quaternion
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Quaternion operator-() const;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Quaterniontor addition
  /// @param[in] other The other quaternion with which the quaternion sum will
  ///   be taken
  /// @return A new quaternion which is the sum of this quaternion with the
  ///   other
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Quaternion operator+(const Quaternion& other) const noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Quaterniontor subtraction
  /// @param[in] other The other quaternion with which the quaternion difference
  ///   will be taken
  /// @return A new quaternion which is the difference of this quaternion with
  ///   the other
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Quaternion operator-(const Quaternion& other) const noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Quaternion product
  /// @param[in] other The other quaternion
  /// @return The product of this quaternion and the other
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Quaternion operator*(const Quaternion& other) const noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Scalar multiplication
  /// @param[in] other A number
  /// @return The product of other with this quaternion
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Quaternion operator*(real other) const noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Scalar multiplication
  /// @param[in] a A number
  /// @param[in] q A quaternion
  /// @return The product of a with q
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] WAYWARDRT_EXPORT friend Quaternion operator*(
      real a, const Quaternion& q) {
    return q*a;
  }

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Scalar division
  /// @param[in] other A number
  /// @return The product of (1/other) with this quaternion
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Quaternion operator/(real other) const noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Quaternion-vector product
  /// @param[in] other The other quaternion
  /// @return The product of this quaternion and the other, taking it as a
  ///   quaternion with zero real part
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Quaternion operator*(const Vec3& other) const noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Quaternion-vector product
  /// @param[in] v A vector
  /// @param[in] q A quaternion
  /// @return The product v*q, taking v as a quaternion with zero real part
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] WAYWARDRT_EXPORT friend Quaternion operator*(
      const Vec3& v, const Quaternion& q) {
    return Quaternion(v)*q;
  }

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Quaterniontor addition assignment
  /// @details Sets this quaternion to the sum of itself and another quaternion
  /// @param[in] other The other quaternion
  /// @return A reference to this quaternion
  //////////////////////////////////////////////////////////////////////////////
  Quaternion& operator+=(const Quaternion& other) noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Quaterniontor subtraction assignment
  /// @details Sets this quaternion to the diffrence between itself and another
  ///   quaternion (this - other)
  /// @param[in] other The other quaternion
  /// @return A reference to this quaternion
  //////////////////////////////////////////////////////////////////////////////
  Quaternion& operator-=(const Quaternion& other) noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Scalar multiplication assignment
  /// Sets this quaternion to a scalar multiple of itself
  /// @param[in] other The number by which to multiply this quaternion
  /// @return A reference to this quaternion
  //////////////////////////////////////////////////////////////////////////////
  Quaternion& operator*=(real other) noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Scalar division assignment
  /// Sets this quaternion to a scalar multiple of itself
  /// @param[in] other The number by which to divide this quaternion
  /// @return A reference to this quaternion
  //////////////////////////////////////////////////////////////////////////////
  Quaternion& operator/=(real other) noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief String representation
  /// @return A string representation of this quaternion (e.g.
  ///   "(2.0, 1.0, -5.3, 2.7)")
  //////////////////////////////////////////////////////////////////////////////
  std::string to_string() const noexcept;

  [[nodiscard]] bool operator==(const Quaternion& other) const noexcept;
  [[nodiscard]] bool operator!=(const Quaternion& other) const noexcept;

  friend WAYWARDRT_EXPORT std::ostream& operator<<(
    std::ostream& os, const Quaternion& v);

 private:
  Vec3 to_Vec3();
};

}  // namespace WaywardRT

#endif  // WAYWARDRT_INCLUDE_WAYWARDRT_QUATERNION_H_
