// WaywardRT/WaywardRT/include/WaywardRT/Vec3.h
// Copyright 2022 Trey Stoner
// All rights reserved

#ifndef WAYWARDRT_INCLUDE_WAYWARDRT_VEC3_H_
#define WAYWARDRT_INCLUDE_WAYWARDRT_VEC3_H_

#include <cstdint>
#include <ostream>

#include "WaywardRT_export.h"

namespace WaywardRT {

static constexpr uint8_t DOUBLE_PRECISION = 10;

//////////////////////////////////////////////////////////////////////////////
/// Represents a 3D vector
/// @author   Trey Stoner
/// @version  0.1.0
/// @since    0.1.0
//////////////////////////////////////////////////////////////////////////////
class WAYWARDRT_EXPORT Vec3 {
 public:
  double x, y, z;

 public:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief Creates a new unit vector in a random direction
  //////////////////////////////////////////////////////////////////////////////
  static Vec3 random_unit();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Creates a new vector in a random direction with magnitude less than
  ///   1
  //////////////////////////////////////////////////////////////////////////////
  static Vec3 random_in_unit_sphere();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Initializes a zero vector
  //////////////////////////////////////////////////////////////////////////////
  Vec3();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Initializes a vector
  /// @param[in] x The first component
  /// @param[in] y The second component
  /// @param[in] z The third component
  //////////////////////////////////////////////////////////////////////////////
  Vec3(double x, double y, double z);

  Vec3(const Vec3& other);
  Vec3& operator=(const Vec3& other);


  //////////////////////////////////////////////////////////////////////////////
  /// @brief Creates a new vector of unit magnitude in the direction of this
  ///   vector
  /// @return The new unit vector
  //////////////////////////////////////////////////////////////////////////////
  Vec3 e() const;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Sets this vector to a unit magnitude vector in the same direction
  /// @return A reference to this vector
  //////////////////////////////////////////////////////////////////////////////
  Vec3& normalize() noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Creates a new vector which is equal to the reflection of this
  ///   vector about a normal vector
  /// @param[in] n The normal about which to reflect
  /// @return The reflected vector
  //////////////////////////////////////////////////////////////////////////////
  Vec3 reflect(const Vec3& n);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Accesses vector component
  /// @param[in] index The index at which to retrieve the value (0, 1 or 2)
  /// @return A reference to the (index)th vector component
  /// @throws std::out_of_range when index is not 0, 1 or 2
  //////////////////////////////////////////////////////////////////////////////
  double& operator[](int index);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Creates a new vector of the same magnitude in the opposite
  ///   direction
  /// @return The new vector
  //////////////////////////////////////////////////////////////////////////////
  Vec3 operator-() const;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Vector addition
  /// @param[in] other The other vector with which the vector sum will be taken
  /// @return A new vector which is the sum of this vector with the other
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Vec3 operator+(const Vec3& other) const noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Vector subtraction
  /// @param[in] other The other vector with which the vector difference will be
  ///   taken
  /// @return A new vector which is the difference of this vector with the other
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Vec3 operator-(const Vec3& other) const noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Dot product
  /// @param[in] other The other vector with which the dot product will be takens
  /// @return The dot product of this vector and the other
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] double operator*(const Vec3& other) const noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Scalar multiplication
  /// @param[in] other A number
  /// @return The product of other with this vector
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Vec3 operator*(double other) const noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Scalar multiplication
  /// @param[in] a A number
  /// @param[in] v A vector
  /// @return The product of a with v
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] WAYWARDRT_EXPORT friend Vec3 operator*(double a, const Vec3& v);

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Scalar division
  /// @param[in] other A number
  /// @return The product of (1/other) with this vector
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Vec3 operator/(double other) const noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Cross product
  /// @param[in] other The other vector with which the cross product will be taken
  /// @return The cross product of this vector with the other
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] Vec3 cross(const Vec3& other) const noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Cross product
  /// @param[in] v1 The first vector
  /// @param[in] v2 The second vector
  /// @return The cross product of the two vectors
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] WAYWARDRT_EXPORT friend Vec3 cross(
    const Vec3& v1, const Vec3& v2) noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Vector addition assignment
  /// @details Sets this vector to the sum of itself and another vector
  /// @param[in] other The other vector
  /// @return A reference to this vector
  //////////////////////////////////////////////////////////////////////////////
  Vec3& operator+=(const Vec3& other) noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Vector subtraction assignment
  /// @details Sets this vector to the diffrence between itself and another
  ///   vector (this - other)
  /// @param[in] other The other vector
  /// @return A reference to this vector
  //////////////////////////////////////////////////////////////////////////////
  Vec3& operator-=(const Vec3& other) noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Scalar multiplication assignment
  /// Sets this vector to a scalar multiple of itself
  /// @param[in] other The number by which to multiply this vector
  /// @return A reference to this vector
  //////////////////////////////////////////////////////////////////////////////
  Vec3& operator*=(double other) noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Scalar multiplication assignment
  /// Sets this vector to a scalar multiple of itself
  /// @param[in] other The number by which to divide this vector
  /// @return A reference to this vector
  //////////////////////////////////////////////////////////////////////////////
  Vec3& operator/=(double other) noexcept;

  [[nodiscard]] bool operator==(const Vec3& other) const noexcept;
  [[nodiscard]] bool operator!=(const Vec3& other) const noexcept;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Magnitude
  /// @return The magnitude of this vector
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] double len() const;

  //////////////////////////////////////////////////////////////////////////////
  /// @brief Magnitude squared
  /// @return The magnitude squared of this vector, or the dot product of it
  ///   with itself
  //////////////////////////////////////////////////////////////////////////////
  [[nodiscard]] double len_sq() const;

  friend WAYWARDRT_EXPORT std::ostream& operator<<(
    std::ostream& os, const Vec3& v);
};

}  // namespace WaywardRT

#endif  // WAYWARDRT_INCLUDE_WAYWARDRT_VEC3_H_
